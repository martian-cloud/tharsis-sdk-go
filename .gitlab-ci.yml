include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/SAST-IaC.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - component: gitlab.com/infor-cloud/gitlab-components/software-bill-of-materials/generate-sbom-go@$SBOM_COMPONENT_VERSION
    inputs:
      assert_licenses: true
      std: true
      generate_for_modules: true
      go_arch_os:
        - GO_ARCH: "386"
          GO_OS: [freebsd, linux, openbsd, windows]
        - GO_ARCH: amd64
          GO_OS: [darwin, freebsd, linux, openbsd, solaris, windows]
        - GO_ARCH: arm
          GO_OS: [freebsd, linux]
        - GO_ARCH: arm64
          GO_OS: [darwin, linux]
      cgo_enabled: "0"
      verbose: true
      remote_sbom_component_mapping_file_namespace_path: infor-cloud/martian-cloud/sbom-component-mapping
      remote_sbom_component_mapping_file_branch: main
      remote_sbom_component_mapping_file_path: mapping-go.json
    rules:
      - if: $CI_COMMIT_TAG
  - component: gitlab.com/infor-cloud/gitlab-components/software-bill-of-materials/merge-sboms@$SBOM_COMPONENT_VERSION
    inputs:
      hierarchical: true
      name: tharsis-sdk-go
      version: $CI_COMMIT_TAG
  # Commented out as we are using our own tool for license scanning
  # - template: Jobs/License-Scanning.gitlab-ci.yml

stages:
  - test

# Only start pipelines on Merge Requests or the default branch
workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_MERGE_REQUEST_IID
      when: always
    - if: $CI_COMMIT_TAG
      when: always
    - when: never

variables:
  GO_VERSION: "1.20"
  CGO_ENABLED: "0"
  GOPATH_RELATIVE_PATH: .go
  GOPATH: "$CI_PROJECT_DIR/$GOPATH_RELATIVE_PATH"
  GOCACHE: "$GOPATH/cache"
  SAST_EXCLUDED_PATHS: "$GOPATH_RELATIVE_PATH, example"
  SECRET_DETECTION_EXCLUDED_PATHS: "$GOPATH_RELATIVE_PATH"

default:
  tags:
    - oss
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - stuck_or_timeout_failure
      - runner_system_failure
  interruptible: true

.cache-template: &cache-template
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  paths:
    - ".go/pkg/mod"
    - ".go/cache"

#################################
##            RULES            ##
#################################

.on_merge_request_and_merged_events:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "merge_request_event"'

.on_default_branch_and_merge_train_with_golang_changes:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      changes:
        - "**/go.mod"
        - "**/go.sum"
        - go.mod
        - go.sum

.on_tag_events:
  rules:
    - if: "$CI_COMMIT_TAG"

#################################
##            BUILD            ##
#################################

tests:
  image: golang:${GO_VERSION}-alpine
  stage: test
  before_script:
    - export PATH=$PATH:$GOPATH/bin
    - apk add postgresql-client libpq-dev git bash openssh ca-certificates
    - go install github.com/jstemmer/go-junit-report@latest
    - go install github.com/boumenot/gocover-cobertura@latest
  script:
    - |
      go vet $(go list ./... | grep -v /vendor/)
      go test -covermode=atomic -coverpkg  gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-sdk-go/... -v -coverprofile .coverage ./... 2>&1 | tee .test-results
      go tool cover -func .coverage | tail
      go-junit-report -set-exit-code < .test-results > .xunit-results.xml
      gocover-cobertura < .coverage > coverage.xml
  artifacts:
    when: always
    reports:
      junit: .xunit-results.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: '/\(statements\)\s*(\d+(?:\.\d+)?%)/'
  cache:
    <<: *cache-template

lint:
  image: golang:${GO_VERSION}-alpine
  stage: test
  before_script:
    - export PATH=$PATH:$GOPATH/bin
    - apk add git bash openssh ca-certificates
    - go install github.com/mgechev/revive@$GO_LINTER_VERSION
  script:
    - |
      go mod download
      revive -set_exit_status $(go list ./... | grep -v /vendor/)
  cache:
    <<: *cache-template

#################################
##            SAST             ##
#################################

gemnasium-dependency_scanning:
  variables:
    DS_EXCLUDED_PATHS: "$GOPATH_RELATIVE_PATH"
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]

semgrep-sast:
  before_script:
    - |
      echo "*_test.go" >> /semgrepignore
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]

kics-iac-sast:
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]

secret_detection:
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]

license_scanning:
  stage: test
  image: golang:${GO_VERSION}-alpine
  allow_failure: true
  before_script:
    - export PATH=$PATH:$GOPATH/bin
    - apk add git bash openssh ca-certificates make jq
    - go install github.com/uw-labs/lichen@latest
  script:
    - |
      export PACKAGE=$(go list -m)
      export BINARY=$(echo $PACKAGE | rev | cut -d'/' -f1 | rev)

      # Since this is a SDK package and not a CLI, create a fake binary
      echo -e "package main\n\nimport _ \"$PACKAGE/pkg\"\n\nfunc main() { }\n" > main.go

      go build -a -o $BINARY $PACKAGE

    - lichen -j lichen.json $BINARY
    - >
      jq '{"version": "2.1","licenses": [ . | .Modules[] | .Licenses[] | {"id": .Name,"name": .Name, "url": ("https://opensource.org/licenses/" + .Name) } ] | unique,"dependencies":[ . | .Modules[] | {"name": .Path, "version": .Version, "package_manager": "go","path": "go.sum","licenses": [ .Licenses[] | .Name]}]}' lichen.json > gl-license-scanning-report.json
  cache:
    <<: *cache-template
  artifacts:
    reports:
      license_scanning: gl-license-scanning-report.json
    paths: [gl-license-scanning-report.json]
  dependencies: []
  rules:
    - !reference [.on_default_branch_and_merge_train_with_golang_changes, rules]

merge-cyclonedx-sboms:
  rules:
    - !reference [.on_tag_events, rules]
  needs:
    - job: "go-sbom (,0)"
      optional: true
