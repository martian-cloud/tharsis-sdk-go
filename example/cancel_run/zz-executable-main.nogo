package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"time"

	tharsis "oxford.awsdev.infor.com/cts/cicd/martian-cloud/tharsis-sdk-go/pkg"
	"oxford.awsdev.infor.com/cts/cicd/martian-cloud/tharsis-sdk-go/pkg/config"
	"oxford.awsdev.infor.com/cts/cicd/martian-cloud/tharsis-sdk-go/pkg/types"
)

const (
	// Where to find stuff:
	workspacePath = "rmr-group-01/rmr-workspace-01"
)

func main() {

	runID, planJobID, applyJobID, err := findLatestRun(workspacePath)
	if err != nil {
		log.Println(err)
		os.Exit(1)
	}

	if err := ExampleCancelRun(runID, false); err != nil {
		log.Printf("Graceful cancel returned an error: %s\n", err)
	}

	// Sleep 1 second to let the run get underway.
	time.Sleep(1 * time.Second)

	// Attempt a forced cancel, which should fail.
	if err := ExampleCancelRun(runID, true); err != nil {
		log.Printf("As expected, the first forced cancel returned an error: %s\n", err)
	}

	// Print plan and apply jobs, if any.
	if err := printJob("Plan", planJobID); err != nil {
		log.Printf("ERROR: cannot print plan job %s: %s", planJobID, err)
	}
	if err := printJob("Apply", applyJobID); err != nil {
		log.Printf("ERROR: cannot print apply job %s: %s", applyJobID, err)
	}

	// Sleep 5 seconds to let forced cancel become allowed.
	time.Sleep(5 * time.Second)

	// Attempt another forced cancel, which should succeed (or be moot).
	if err := ExampleCancelRun(runID, true); err != nil {
		log.Printf("The second forced cancel returned an (unexpected) error: %s\n", err)
	}

}

// printJob prints a job if it exists.
func printJob(which, jobID string) error {

	if jobID == "" {
		fmt.Printf("\n%s job ID is empty.\n\n", which)
		return nil
	}

	cfg, err := config.Load(config.WithEndpoint("http://localhost:8000"))
	if err != nil {
		return err
	}

	client, err := tharsis.NewClient(cfg)
	if err != nil {
		return err
	}

	// First, get the latest run in this workspace.
	ctx := context.Background()
	theJob, err := client.Job.GetJob(ctx, &types.GetJobInput{ID: jobID})
	if err != nil {
		return err
	}

	indented, err := json.MarshalIndent(theJob, "", "  ")
	if err != nil {
		return err
	}
	fmt.Printf("\n%s job:\n%s\n\n", which, indented)

	return nil
}

// findLatestRun is a NON-Checked-In function.
func findLatestRun(workspacePath string) (string, string, string, error) {

	cfg, err := config.Load(config.WithEndpoint("http://localhost:8000"))
	if err != nil {
		return "", "", "", err
	}

	client, err := tharsis.NewClient(cfg)
	if err != nil {
		return "", "", "", err
	}

	// First, get the latest run in this workspace.
	ctx := context.Background()
	sortable := types.RunSortableFieldCreatedAtDesc
	one := int32(1)
	runsOutput, err := client.Run.GetRuns(ctx, &types.GetRunsInput{
		Sort: &sortable,
		Filter: &types.RunFilter{
			WorkspacePath: &workspacePath,
		},
		PaginationOptions: &types.PaginationOptions{
			Limit: &one,
		},
	})
	if err != nil {
		return "", "", "", err
	}
	runs := runsOutput.Runs
	if len(runs) != 1 {
		return "", "", "", fmt.Errorf("expected 1 run, got %d", len(runs))
	}
	latestRun := runs[0]

	// Print:
	indented, err := json.MarshalIndent(latestRun, "", "  ")
	if err != nil {
		return "", "", "", err
	}
	fmt.Printf("\nLatest run:\n%s\n\n", indented)

	planJobID := ""
	if latestRun.Plan != nil {
		if latestRun.Plan.CurrentJobID != nil {
			planJobID = *latestRun.Plan.CurrentJobID
		}
	}

	applyJobID := ""
	if latestRun.Apply != nil {
		if latestRun.Apply.CurrentJobID != nil {
			applyJobID = *latestRun.Apply.CurrentJobID
		}
	}

	return latestRun.Metadata.ID, planJobID, applyJobID, nil
}

// ExampleCancelRun demonstrates canceling the specified run.
func ExampleCancelRun(runID string, force bool) error {

	cfg, err := config.Load(config.WithEndpoint("http://localhost:8000"))
	if err != nil {
		return err
	}

	client, err := tharsis.NewClient(cfg)
	if err != nil {
		return err
	}

	// Second, cancel the run.
	ctx := context.Background()
	comment := "This is an example cancel operation on a run."
	canceledRun, err := client.Run.CancelRun(ctx,
		&types.CancelRunInput{
			RunID:   runID,
			Comment: &comment,
			Force:   &force,
		})
	if err != nil {
		return err
	}

	// Print:
	indented, err := json.MarshalIndent(canceledRun, "", "  ")
	if err != nil {
		return err
	}
	fmt.Printf("\nCanceled run:\n%s\n\n", indented)

	return nil
}

// The End.
